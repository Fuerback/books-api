// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/adapter/repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/Fuerback/books-api/internal/app/adapter/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepoBook is a mock of RepoBook interface.
type MockRepoBook struct {
	ctrl     *gomock.Controller
	recorder *MockRepoBookMockRecorder
}

// MockRepoBookMockRecorder is the mock recorder for MockRepoBook.
type MockRepoBookMockRecorder struct {
	mock *MockRepoBook
}

// NewMockRepoBook creates a new mock instance.
func NewMockRepoBook(ctrl *gomock.Controller) *MockRepoBook {
	mock := &MockRepoBook{ctrl: ctrl}
	mock.recorder = &MockRepoBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoBook) EXPECT() *MockRepoBookMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepoBook) Create(ctx context.Context, book repository.NewBook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepoBookMockRecorder) Create(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoBook)(nil).Create), ctx, book)
}

// Delete mocks base method.
func (m *MockRepoBook) Delete(ctx context.Context, bookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepoBookMockRecorder) Delete(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepoBook)(nil).Delete), ctx, bookID)
}

// Read mocks base method.
func (m *MockRepoBook) Read(ctx context.Context, bookID string) (repository.BookDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, bookID)
	ret0, _ := ret[0].(repository.BookDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRepoBookMockRecorder) Read(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepoBook)(nil).Read), ctx, bookID)
}

// Update mocks base method.
func (m *MockRepoBook) Update(ctx context.Context, book repository.BookDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepoBookMockRecorder) Update(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoBook)(nil).Update), ctx, book)
}
